local m = FindMetaTable"Entity";

local function nothing(self, w) return w end

local function netvar(mt, type, name, var, mod, offset2)
	local f = mt["GetNW"..type];

	local offset = -1;
	local r;
	offset2 = offset2 or 0;
	local hasgotten = false;

	mt[name] = function(self)
		r, offset = f(self, var, offset);
		if(not hasgotten) then
			offset += offset2;
			hasgotten = true
		end
		return (mod or nothing)(self, r);
	end
end


--players
netvar(m, "Angle", "EyeAngles", "m_angEyeAngles[0]");
netvar(m, "Vector", "ShootPos", "m_vecViewOffset[0]", function(self, w) return w + self:GetPos(); end);
netvar(m, "Int", "Health", "m_iHealth");
netvar(m, "Int", "Team", "m_iTeamNum");

netvar(m, "Int", "LifeState", "m_lifeState", function(self,w) return w & 0xFF; end);
netvar(m, "Int", "MoveType", "m_lifeState", function(self, w) return w & 0xFF; end, -3);

netvar(m, "Angle", "Rotation", "m_angRotation");

--localplayer

netvar(m, "Angle", "Punch", "m_aimPunchAngle");
netvar(m, "Angle", "ViewPunch", "m_viewPunchAngle");
netvar(m, "Int", "TickBase", "m_nTickBase");

netvar(m, "Int", "ShotsFired", "m_iShotsFired")

--weapons
netvar(m, "Int", "Ammo", "m_iClip1");
netvar(m, "Float", "NextPrimaryAttack", "m_flNextPrimaryAttack");

local function CurTime()
	return LocalPlayer():TickBase() * TickInterval();
end
function m:CanShoot()
	return self:GetActiveWeapon():Ammo() > 0 and self:GetActiveWeapon():NextPrimaryAttack() <= CurTime();
end

function m:AimVector()
	return self:EyeAngles():Vector()
end

function m:Alive()
	return self:Health() > 0
end

local function RecurseAndCheckRecvTable(table, name)

	if (table:GetName() == name) then return true; end

    for i = 1, table:GetPropertyCount() do

        local prop = table:GetProperty(i - 1);

        if (prop:GetName() == "baseclass") then
            return RecurseAndCheckRecvTable(prop:GetDatatable(), name);
		end

	end

	return false;

end

function m:IsWeapon()

	return RecurseAndCheckRecvTable(self:GetClientClass():GetRecvTable(), "DT_WeaponCSBase");

end
